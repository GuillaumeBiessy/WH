// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// create_P_compact_cpp
NumericMatrix create_P_compact_cpp(int p, int q);
RcppExport SEXP _WH_create_P_compact_cpp(SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(create_P_compact_cpp(p, q));
    return rcpp_result_gen;
END_RCPP
}
// backsolve_compact_cpp
NumericVector backsolve_compact_cpp(const NumericMatrix& C, const NumericVector& b, bool transpose);
RcppExport SEXP _WH_backsolve_compact_cpp(SEXP CSEXP, SEXP bSEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    rcpp_result_gen = Rcpp::wrap(backsolve_compact_cpp(C, b, transpose));
    return rcpp_result_gen;
END_RCPP
}
// diag_V_compact_cpp
NumericVector diag_V_compact_cpp(const NumericMatrix& C);
RcppExport SEXP _WH_diag_V_compact_cpp(SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(diag_V_compact_cpp(C));
    return rcpp_result_gen;
END_RCPP
}
// get_prod_P_y_compact_cpp
NumericVector get_prod_P_y_compact_cpp(const NumericMatrix& y, const List& C_list);
RcppExport SEXP _WH_get_prod_P_y_compact_cpp(SEXP ySEXP, SEXP C_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type C_list(C_listSEXP);
    rcpp_result_gen = Rcpp::wrap(get_prod_P_y_compact_cpp(y, C_list));
    return rcpp_result_gen;
END_RCPP
}
// get_prod_P_K_compact_cpp
NumericMatrix get_prod_P_K_compact_cpp(const NumericMatrix& K, const List& C_list);
RcppExport SEXP _WH_get_prod_P_K_compact_cpp(SEXP KSEXP, SEXP C_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const List& >::type C_list(C_listSEXP);
    rcpp_result_gen = Rcpp::wrap(get_prod_P_K_compact_cpp(K, C_list));
    return rcpp_result_gen;
END_RCPP
}
// submatrix_compact_cpp
NumericMatrix submatrix_compact_cpp(const NumericMatrix& C, const IntegerVector& drop_indices);
RcppExport SEXP _WH_submatrix_compact_cpp(SEXP CSEXP, SEXP drop_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type drop_indices(drop_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(submatrix_compact_cpp(C, drop_indices));
    return rcpp_result_gen;
END_RCPP
}
// cholesky_compact_lapack
NumericMatrix cholesky_compact_lapack(NumericMatrix& C, bool inplace);
RcppExport SEXP _WH_cholesky_compact_lapack(SEXP CSEXP, SEXP inplaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type C(CSEXP);
    Rcpp::traits::input_parameter< bool >::type inplace(inplaceSEXP);
    rcpp_result_gen = Rcpp::wrap(cholesky_compact_lapack(C, inplace));
    return rcpp_result_gen;
END_RCPP
}
// invert_cholesky_compact_lapack
NumericMatrix invert_cholesky_compact_lapack(const NumericMatrix& C, bool transpose);
RcppExport SEXP _WH_invert_cholesky_compact_lapack(SEXP CSEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type C(CSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    rcpp_result_gen = Rcpp::wrap(invert_cholesky_compact_lapack(C, transpose));
    return rcpp_result_gen;
END_RCPP
}
// backsolve_mat_compact_lapack
NumericVector backsolve_mat_compact_lapack(const NumericMatrix& C, const NumericMatrix& B, bool transpose);
RcppExport SEXP _WH_backsolve_mat_compact_lapack(SEXP CSEXP, SEXP BSEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type B(BSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    rcpp_result_gen = Rcpp::wrap(backsolve_mat_compact_lapack(C, B, transpose));
    return rcpp_result_gen;
END_RCPP
}
// eigenvalues_compact_lapack
NumericVector eigenvalues_compact_lapack(const NumericMatrix& C);
RcppExport SEXP _WH_eigenvalues_compact_lapack(SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenvalues_compact_lapack(C));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_WH_create_P_compact_cpp", (DL_FUNC) &_WH_create_P_compact_cpp, 2},
    {"_WH_backsolve_compact_cpp", (DL_FUNC) &_WH_backsolve_compact_cpp, 3},
    {"_WH_diag_V_compact_cpp", (DL_FUNC) &_WH_diag_V_compact_cpp, 1},
    {"_WH_get_prod_P_y_compact_cpp", (DL_FUNC) &_WH_get_prod_P_y_compact_cpp, 2},
    {"_WH_get_prod_P_K_compact_cpp", (DL_FUNC) &_WH_get_prod_P_K_compact_cpp, 2},
    {"_WH_submatrix_compact_cpp", (DL_FUNC) &_WH_submatrix_compact_cpp, 2},
    {"_WH_cholesky_compact_lapack", (DL_FUNC) &_WH_cholesky_compact_lapack, 2},
    {"_WH_invert_cholesky_compact_lapack", (DL_FUNC) &_WH_invert_cholesky_compact_lapack, 2},
    {"_WH_backsolve_mat_compact_lapack", (DL_FUNC) &_WH_backsolve_mat_compact_lapack, 3},
    {"_WH_eigenvalues_compact_lapack", (DL_FUNC) &_WH_eigenvalues_compact_lapack, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_WH(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
